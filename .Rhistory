data <- df$location
data <- data[nchar(data) > 0 ] # keep those with specified locations
data <- as.data.frame(table(data))
colnames(data) <- c('location','count')
data$location <- str_replace_all(data$location,"[^[:alnum:]]", " ") # omit non-alphanumeric chars
data <- data[order(-data$count),] # sort in descending order by frequency
#limit <- 2500 # google API restriction
#subdata <- data[1:limit,]  # subset top 2500
latlong <- geocode(head(as.vector(data$location),limit),source='dsk',messaging=FALSE)
subdata$lat <- latlong$lat
subdata$lon <- latlong$lon
subdata$latlong <- paste(latlong$lat, latlong$lon, sep=':')
subsubdata <- subdata[is.na(subdata$lat) ==  FALSE ,] # omit failed geocodes
head(data)
subdata <- data
latlong <- geocode(head(as.vector(data$location),limit),source='dsk',messaging=FALSE)
subdata$lat <- latlong$lat
subdata$lon <- latlong$lon
subdata$latlong <- paste(latlong$lat, latlong$lon, sep=':')
subsubdata <- subdata[is.na(subdata$lat) ==  FALSE ,] # omit failed geocodes
twitterhandle <- 'Climeon'
user <- getUser(twitterhandle)
#df <- twListToDF(user$getFriends())  # Following/Friends
df <- twListToDF(user$getFollowers()) # Followers
data <- df$location
data <- data[nchar(data) > 0 ] # keep those with specified locations
data <- as.data.frame(table(data))
colnames(data) <- c('location','count')
data$location <- str_replace_all(data$location,"[^[:alnum:]]", " ") # omit non-alphanumeric chars
data <- data[order(-data$count),] # sort in descending order by frequency
#limit <- 2500 # google API restriction
#subdata <- data[1:limit,]  # subset top 2500
subdata <- data
latlong <- geocode(head(as.vector(data$location),limit),source='dsk',messaging=FALSE)
subdata$lat <- latlong$lat
subdata$lon <- latlong$lon
subdata$latlong <- paste(latlong$lat, latlong$lon, sep=':')
subsubdata <- subdata[is.na(subdata$lat) ==  FALSE ,] # omit failed geocodes
# Specify user & process data
twitterhandle <- 'Climeon'
user <- getUser(twitterhandle)
#df <- twListToDF(user$getFriends())  # Following/Friends
df <- twListToDF(user$getFollowers()) # Followers
data <- df$location
data <- data[nchar(data) > 0 ] # keep those with specified locations
data <- as.data.frame(table(data))
colnames(data) <- c('location','count')
data$location <- str_replace_all(data$location,"[^[:alnum:]]", " ") # omit non-alphanumeric chars
data <- data[order(-data$count),] # sort in descending order by frequency
#limit <- 2500 # google API restriction
#subdata <- data[1:limit,]  # subset top 2500
subdata <- data
latlong <- geocode(head(as.vector(data$location),limit),source='dsk',messaging=FALSE)
subdata$lat <- latlong$lat
subdata$lon <- latlong$lon
subdata$latlong <- paste(latlong$lat, latlong$lon, sep=':')
subsubdata <- subdata[is.na(subdata$lat) ==  FALSE ,] # omit failed geocodes
# Specify user & process data
twitterhandle <- 'Climeon'
user <- getUser(twitterhandle)
#df <- twListToDF(user$getFriends())  # Following/Friends
df <- twListToDF(user$getFollowers()) # Followers
data <- df$location
data <- data[nchar(data) > 0 ] # keep those with specified locations
data <- as.data.frame(table(data))
colnames(data) <- c('location','count')
data$location <- str_replace_all(data$location,"[^[:alnum:]]", " ") # omit non-alphanumeric chars
data <- data[order(-data$count),] # sort in descending order by frequency
limit <- 2500 # google API restriction
subdata <- data[1:limit,]  # subset top 2500
latlong <- geocode(head(as.vector(data$location),limit),source='dsk',messaging=FALSE)
subdata$lat <- latlong$lat
subdata$lon <- latlong$lon
subdata$latlong <- paste(latlong$lat, latlong$lon, sep=':')
subsubdata <- subdata[is.na(subdata$lat) ==  FALSE ,] # omit failed geocodes
head(subsubdata)
head(subdata)
head(subdata,30)
library(twitteR) # interface to twitter API
library(ggmap) # visualize spatial data and models on static maps
library(googleVis) # interface to google API for plots
library(stringr) # to manipulate strings
# Start the clock!
ptm <- proc.time()
# Handshake with Twitter
consumerKey <-'EbLYja0GNpaOmUGOx8yev30PY'
consumerSecret <- 'zhowIeV7W2ZU921kYGUj1wEFzIgDaxHNC2vx67KEwvGmyyIJxW'
accessToken <- '839129855165939712-lYpjzvWXCKTgFrlPgYgUYWq7I0IE5h2'
accessSecret <- 'nLfAqEFOX7uDRJWLGrTRb2dwXNAOscCCg9FhBDej1kTv6'
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
df <- twListToDF(user$getFollowers()) # Followers
data <- df$location
data <- data[nchar(data) > 0 ] # keep those with specified locations
data <- as.data.frame(table(data))
colnames(data) <- c('location','count')
data$location <- str_replace_all(data$location,"[^[:alnum:]]", " ") # omit non-alphanumeric chars
data <- data[order(-data$count),] # sort in descending order by frequency
limit <- 2500 # google API restriction
subdata <- data[1:limit,]  # subset top 2500
latlong <- geocode(head(as.vector(data$location),limit),source='dsk',messaging=FALSE)
subdata$lat <- latlong$lat
subdata$lon <- latlong$lon
subdata$latlong <- paste(latlong$lat, latlong$lon, sep=':')
subsubdata <- subdata[is.na(subdata$lat) ==  FALSE ,] # omit failed geocodes
subdata <- data
latlong <- geocode(head(as.vector(data$location),limit),source='dsk',messaging=FALSE)
subdata$lat <- latlong$lat
subdata$lon <- latlong$lon
subdata$latlong <- paste(latlong$lat, latlong$lon, sep=':')
subsubdata <- subdata[is.na(subdata$lat) ==  FALSE ,] # omit failed geocodes
head(data)
twitterhandle <- 'Climeon'
user <- getUser(twitterhandle)
#df <- twListToDF(user$getFriends())  # Following/Friends
df <- twListToDF(user$getFollowers()) # Followers
data <- df$location
data <- data[nchar(data) > 0 ] # keep those with specified locations
data <- as.data.frame(table(data))
colnames(data) <- c('location','count')
data$location <- str_replace_all(data$location,"[^[:alnum:]]", " ") # omit non-alphanumeric chars
data <- data[order(-data$count),] # sort in descending order by frequency
head(data)
subdata <- data
latlong <- geocode(head(as.vector(data$location),limit),source='dsk',messaging=FALSE)
subdata$lat <- latlong$lat
subdata$lon <- latlong$lon
subdata$latlong <- paste(latlong$lat, latlong$lon, sep=':')
subsubdata <- subdata[is.na(subdata$lat) ==  FALSE ,] # omit failed geocodes
geo_all <- gvisGeoChart(subsubdata, locationvar = 'latlong', sizevar = 'count',
options = list(region = 'world', displaymode = 'markers',
colors = "['green','green']"))
plot(geo_all)
head(data,50)
get.Locale()
Sys.getlocale()
Sys.setlocale(category = "LC_ALL", locale = "sv_SE.UTF-8")
Sys.getlocale()
install.packages("shiny")
Sys.setlocale(category = "LC_ALL", locale = "C")
install.packages("shiny")
Sys.getlocale()
Sys.getlocale()
Sys.getlocale()
shiny::runApp('Dropbox/Work/Projects/2018/hack4sweden2016')
shiny::runApp('Dropbox/Work/Projects/2018/hack4sweden2016')
install.packages("shiny")
install.packages("shinythemes")
shiny::runApp('Dropbox/Work/Projects/2018/hack4sweden2016')
install.packages("shiny", dependencies = T)
shiny::runApp('Dropbox/Work/Projects/2018/hack4sweden2016')
shiny::runApp('Dropbox/Work/Projects/2018/hack4sweden2016')
library(shiny)
install.packages(later)
install.packages("later")
shiny::runApp('Dropbox/Work/Projects/2018/hack4sweden2016')
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(shiny)
install.packages("shiny", dependencies = TRUE)
install.packages("yaml")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("later")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
runApp('Dropbox/Work/Projects/2018/hack4sweden2016')
runExample("01_hello")
runExample("02_text")
runApp('Dropbox/Work/Projects/2018/hack4sweden2016')
setwd("~/Dropbox/Work/Projects/2018")
# Define UI for dataset viewer app ----
ui <- fluidPage(
# App title ----
titlePanel("Shiny Text"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
runApp()
runApp('hack4sweden2016')
setwd("~/Dropbox/Work/Projects/2018/hack4sweden2016")
## app.R ##
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs), col = 'darkgray', border = 'white')
})
}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
sliderInput("obs", "Number of observations:", min = 10, max = 500, value = 100)
),
mainPanel(plotOutput("distPlot"))
)
)
shinyApp(ui = ui, server = server)
runApp()
shinyApp(ui = ui, server = server)
runApp()
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
load("data.Rda")
runApp()
runApp()
install.packages("googleVis")
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
runApp()
load("testdf2.Rda")
load("testdf.Rda")
currdata
head(data)
load("data.Rda")
head(data)
runApp()
load("testdf2.Rda")
load("testdf.Rda")
head(currdata)
names(data)
names(data)[2:22]
currdata <- c(names(data)[2:22])
currdata
currdata <- c(names(data)[2:22])
currdata$Risk <- 0
currdata$Risk <- 0
currdata
currdata <- c(names(data)[2:22])
currdata
currdata <- c(names(data)[2:22], rep(0,21))
currdata
?matrix
currdata <- matrix(nrow = 21, ncol =2)
currdata
levels(currdata)
load("data.Rda")
currdata <- matrix(nrow = 21, ncol =2)
levels(currdata)
names(currdata)
colnames(currdata)
colnames(currdata) <- c('h1','h2')
currdata
names(currdata)
levels(currdata)
currdata <- data.frame(matrix(nrow = 21, ncol =2))
currdata
names(currdata) <- c('Region','Risk')
currdata
currdata$Region <- names(data)[2:22]
currdata
data[,1]
data[,-1]
as.vector(data[,-1])
as.vector(data[1,-1])
currdata$Region <- names(data)[-1]
currdata$Region
currdata
shiny::runApp()
library(shiny)
runApp()
library(shinythemes)
runApp()
library(googleVis)
runApp()
runApp()
## app.R ##
# load data and required packages
library(shiny)
library(shinythemes)
library(googleVis)
load("data.Rda")
# create a data frame which holds current values to display
currdata <- data.frame(matrix(nrow = 21, ncol = 2))
names(currdata) <- c('Region','Risk')
currdata$Region <- names(data)[-1]
# Server function
server <- function(input, output, session) {
# Update risk for all regions at specific point in time
risk <- reactive({
as.vector(data[input$time,-1],mode="numeric")
})
# Produce chart
output$gvis <-
renderGvis({
currdata$Risk <- risk()
gvisGeoChart(data=currdata, locationvar = "Region",
colorvar = "Risk", hovervar = ,
options = list(region="SE", displayMode="regions",
resolution="provinces",
backgroundColor="2049a1",
colors = "['#0000E5', '#0058E1', '#00AEDD', '#00D9B1','#00D559','00D204','4DCE00','9CCA00','C6A400']",
width=900, height=556))
})
}
# User interface function
ui <- navbarPage(title="Observations of regional risk for floods in Sweden", theme = shinytheme("spacelab"),
tabPanel(title="Chart",
sidebarLayout(
sidebarPanel(
h4("How to use "),
"Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Etiam ullamcorper eleifend eros, ac faucibus augue
euismod vel. Proin augue lorem, semper iaculis dui
quis, imperdiet lobortis eros. Donec id orci egestas,
malesuada urna non, pharetra tellus. Nulla facilisi. Aenean
molestie fringilla nibh, sit amet tincidunt massa efficitur id.
Nam tincidunt est sit amet aliquam blandit. Duis id lectus vel
mauris sodales aliquam.",
br(),
br(),
sliderInput("time", "Months since January 2015",
min = min(data$Date), max = max(data$Date),
value = 0, step=1, animate = TRUE, pre="M")
),
mainPanel(
fluidRow(
column(12,
htmlOutput("gvis")
)
)
)
)
),
tabPanel(title="About",
sidebarLayout(
sidebarPanel(
h4("Government agency data"),
tags$a(href="http://www.smhi.se/en", "The Swedish Meteorological and Hydrological Institute"),
br(),
br(),
tags$a(href="https://www.msb.se/en/", "The Swedish Civil Contingencies Agency"),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
"Get the R code for this application on",
tags$a(href="https://github.com/danbro/hack4sweden2016.git", "Github")
),
mainPanel(
fluidRow(
column(12,
h4("Lorem ipsum dolor sit amet?"),
"Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Etiam ullamcorper eleifend eros, ac faucibus augue
euismod vel. Proin augue lorem, semper iaculis dui
quis, imperdiet lobortis eros. Donec id orci egestas,
malesuada urna non, pharetra tellus. Nulla facilisi. Aenean
molestie fringilla nibh, sit amet tincidunt massa efficitur id.
Nam tincidunt est sit amet aliquam blandit. Duis id lectus vel
mauris sodales aliquam.",
h4("Lorem ipsum dolor sit amet?"),
"Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Etiam ullamcorper eleifend eros, ac faucibus augue
euismod vel. Proin augue lorem, semper iaculis dui
quis, imperdiet lobortis eros. Donec id orci egestas,
malesuada urna non, pharetra tellus. Nulla facilisi. Aenean
molestie fringilla nibh, sit amet tincidunt massa efficitur id.
Nam tincidunt est sit amet aliquam blandit. Duis id lectus vel
mauris sodales aliquam.",
h4("Lorem ipsum dolor sit amet?"),
"Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Etiam ullamcorper eleifend eros, ac faucibus augue
euismod vel. Proin augue lorem, semper iaculis dui
quis, imperdiet lobortis eros. Donec id orci egestas,
malesuada urna non, pharetra tellus. Nulla facilisi. Aenean
molestie fringilla nibh, sit amet tincidunt massa efficitur id.
Nam tincidunt est sit amet aliquam blandit. Duis id lectus vel
mauris sodales aliquam."
)
)
)
)
),
tabPanel(title="Contact",
sidebarLayout(
sidebarPanel(
h3("Team PoweR"),
h4(tags$a(href="https://www.kth.se/profile/danbro/", "Daniel A. Broden")),
"Ph.D Candidate at the Royal Institute of Technology, Stockholm, Sweden",
br(),
"Email: danbro@kth.se",
br(),
h4(tags$a(href="https://www.kth.se/profile/honeth/", "Nicholas Honeth")),
"Ph.D Candidate at the Royal Institute of Technology, Stockholm, Sweden",
br(),
"Email: honeth@kth.se",
br(),
br(),
br(),
br(),
br(),
br(),
br(),
br(),
"Hack for Sweden 12-13 March 2016",
br()
),
mainPanel(
img(src='smhipic.jpg', align = "middle", keepAspectRatio=T, width=600),
br(),
tags$em("Left to right: ? (SMHI), Daniel A. Broden (KTH), Nicholas Honeth (KTH), Rolf Brennerfelt (SMHI)")
)
)
)
)
# Run application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
load('stationsdf.Rda')
load('stationsli.Rda')
result <- data.frame(County = unique(stationsdf$County), Jan = 0, Feb = 0, Mar = 0, Apr = 0, Maj = 0, Jun = 0, Jul = 0, Aug = 0, Sep = 0, Okt = 0, Nov = 0, Dec = 0)
for (i in 1:21) {
temp <- data.frame(Month = c("Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov", "Dec"))
# Get measurements for each weather stations of county
for (j in 1:dim(stationsli[[i]])[1]){
currdf <- data.frame()
URL <- paste("http://opendata-download-metobs.smhi.se/api/version/latest/parameter/23/station/",stationsli[[i]]$Stationsnummer[j],"/period/corrected-archive/data.csv",sep="")
destfile <- paste("data/",stationsli[[i]]$Stationsnummer[j], ".csv", sep="")
if(!file.exists(destfile)){
download.file(URL, destfile)  # Download file if not already
}
currdf <- read.csv2(destfile, skip = grep(pattern="Datum",readLines(destfile))-1, stringsAsFactors = F)
# subset values for time period of interest
start <- grep('2015-01', currdf$Från.Datum.Tid..UTC.)
stop <- grep('2015-12', currdf$Från.Datum.Tid..UTC.)
# condition when data pattern of file is broken
if (length(start) == 0 || length(stop) == 0) {
temp[,j+1] <- rep(NA,12)
names(temp)[j+1] <- stationsli[[i]]$Stationsnummer[j]
} else if (length(start:stop) == 12) {
temp[,j+1] <- as.numeric(currdf[start:stop, "Nederbördsmängd"])
names(temp)[j+1] <- stationsli[[i]]$Stationsnummer[j]
} else {
temp[,j+1] <- rep(NA,12)
names(temp)[j+1] <- stationsli[[i]]$Stationsnummer[j]
}
}
# average accross county
result[i,2:dim(result)[2]] <- rowMeans(temp[,2:dim(temp)[2]], na.rm = TRUE)
}
head(result)
summary(result)
xmax <- max(result[,2:13])
xmax
xmin <- min(result[,2:13])
xmin
runApp()
runApp()
currdf
head(currdf)
runApp()
?gvisGeoChart
currdata
load("data.Rda")
# create a data frame which holds current values to display
currdata <- data.frame(matrix(nrow = 21, ncol = 2))
names(currdata) <- c('Region','Risk')
currdata$Region <- names(data)[-1]
currdata
currdata[22,1] <- 'Min'
currdata[22,2] <- 0
currdata[22,1] <- 'Max'
currdata[22,2] <- 1
currdata
runApp()
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
