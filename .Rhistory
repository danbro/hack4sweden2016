summary(fit)$r.squared
cor(galton$child,galton$parent)^2
spra
spray
InsectSprays
head(InsectSprays)
str(InsectSprays)
fit <- glm(count ~ spray, data=InsectSprays,family="Poisson")
fit <- glm(count ~ spray, data=InsectSprays,family="poisson")
summary(fit)$coef
fit$coef
fit$coef[1]/(fit$coef[1]+fit$coef[2])
fit <- glm(count ~ spray-1, data=InsectSprays,family="poisson")
fit
fit$coefficients
fit$coef[1]/fit$coef[2]
?relevel
relevel(InsectSprays$spray, A)
relevel(InsectSprays$spray, ref="A")
fit <- glm(InsectSprays$count ~ relevel(InsectSprays$spray, ref="A"), family="poisson")
fit$coef
fit$coef[1]
fit$coef[1]/fit$coef[2]
?offset
log(10)
offset(1)
offset(2)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x
y
load("C:/Nobackup/danbro/Box Sync/PES GM paper 2015/SSEPD data/R scripts/monitorsData.Rda")
View(monitorsData)
head(monitorsData)
shiny::runApp('C:/Nobackup/danbro/Box Sync/PhD Documents/Learning/2014/Coursera/Developing Data Products/Project')
?tics
?ticks
?par
shiny::runApp('C:/Nobackup/danbro/Box Sync/PhD Documents/Learning/2014/Coursera/Developing Data Products/Project')
shiny::runApp('C:/Nobackup/danbro/Box Sync/PhD Documents/Learning/2014/Coursera/Developing Data Products/Project')
deployApp()
```
Slide With Plot 2
Predicting the daily electricity consumption of your house
</small>
date: `r date()`
- Include a submit button in the sidebar panel while still keeping the sliderbar reactive (independently of the submit button)
The weights have been chosen arbitrarly purely for demonstrative purposes
k2
}
weekendload <- c(0.6, 0.58, 0.5, 0.42, 0.4, 0.42, 0.62, 1.1, 1.3, 1.2, 1.1, 0.9, 0.87, 0.86, 0.88, 0.89, 0.92, 0.97, 1.42, 1.98, 2, 1.3, 0.9, 0.5)
Weights are attributed to the user inputs and added to a base case load profile taken from the following source: <http://goo.gl/czCniC>
- Type of day
date: `r date()`
load <- c(0.6, 0.58, 0.5, 0.42, 0.4, 0.42, 0.62, 1.1, 1.3, 0.62, 0.4, 0.39, 0.37, 0.36, 0.35, 0.4, 0.42, 0.82, 1.42, 1.98, 2, 1.3, 0.9, 0.5)
weekendload <- c(0.6, 0.58, 0.5, 0.42, 0.4, 0.42, 0.62, 1.1, 1.3, 1.2, 1.1, 0.9, 0.87, 0.86, 0.88, 0.89, 0.92, 0.97, 1.42, 1.98, 2, 1.3, 0.9, 0.5)
k1 <- 0.25 # rate of change of occupant increase [kW] (chosen arbitrarly)
k2 <- 1 # rate of change of size increase [kW] (chosen arbitrarly)
```
par(mfrow=c(2,1))
plot(1:24,load,type="o",xlab="Hours",ylab="kW")
plot(1:24,weekendload,type="o",xlab="Hours",ylab="kW")
par(mfrow=c(1,1))
plot(1:24,load,type="o",
xlab="Hours",ylab="kW")
?predict
??predict
?stats
?ls
ls("package:stats")
?aggregate
?package.skeleton
show
mean
showMethods("Show")
showMethods("show")
showMethods("plot")
showMethods("mean")
showMethodsS3("plot")
showMethods("apply")
showMethods("aggregate")
showMethods("predict")
showMethods("show")
?show
getMethod(show)
methods("plot")
clc
suppressPackageStartupMessages(library(googleVis))
install.packages('googlevis')
install.packages('googleVis')
suppressPackageStartupMessages(library(googleVis))
?data.frame
?rnorm
rnorm(10, mean=10, sd=2)
windspeed <- rnorm(3, mean=10, sd=2)
locations <- c("Stockholm", "Gothenburg","Malmo")
wind <- data.frame(windspeed, locations)
wind
?data.frame
?gvisGeoChart
# Stockholm, Gothenburg, Malmo
latitude <- c(59.338925, 57.729461, 55.603734)
longitude <- c(18.069943, 11.970587, 13.001561)
wind <- data.frame(windspeed, latitude, longitude)
wind
?gvisGeoMap
?gvisGeoChart
location <- c("59.338925:18.069943", "57.72946111.970587", "55.603734:13.001561")
# latitude:longitude
wind <- data.frame(windspeed, location)
G<-gvisGeoChart(data=wind, locationvar = "location", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(region="SE"), chartid)
G<-gvisGeoChart(data=wind, locationvar = "location", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(region='SE'))
print(G,"chart")
plot(G2)
plot(G)
windspeed
?round
windspeed <- round(rnorm(3, mean=10, sd=2),1)
windspeed <- round(rnorm(3, mean=10, sd=2),1)
# Stockholm, Gothenburg, Malmo
location <- c("59.338925:18.069943", "57.72946111.970587", "55.603734:13.001561")
# latitude:longitude
wind <- data.frame(windspeed, location)
G<-gvisGeoChart(data=wind, locationvar = "location", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(region='SE'))
plot(G)
head(wind)
gvisGeoChart
?gvisGeoChart
data(quakes)
head(quakes)
class(quakes)
str(quakes)
59.338925:18.069943
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
quakes$latlong
class(quakes$latlong)
G<-gvisGeoChart(data=wind, locationvar = "location", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(diplayMode="Markers", region='SE'))
plot(G)
G<-gvisGeoChart(data=wind, locationvar = "location", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(displayMode='markers', region='SE'))
plot(G)
# Test script
# Build a data frame of wind speed data for different coordinates in Sweden
# Visualize on Google geo charts
suppressPackageStartupMessages(library(googleVis))
windspeed <- round(rnorm(3, mean=10, sd=2),1)
# Stockholm, Gothenburg, Malmo
location <- c("59.338925:18.069943", "57.72946:111.970587", "55.603734:13.001561")
# latitude:longitude
wind <- data.frame(windspeed, location)
G<-gvisGeoChart(data=wind, locationvar = "location", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(displayMode='markers', region='SE'))
plot(G)
plot(G)
location <- c("59.338925:18.069943", "57.72946:111.970587", "55.603734:13.001561")
wind <- data.frame(windspeed, location)
G<-gvisGeoChart(data=wind, locationvar = "location", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(displayMode='markers', region='SE'))
plot(G)
wind
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
G7 <- gvisGeoChart(quakes, "latlong", "depth", "mag",
options=list(displayMode="Markers", region="009",
colorAxis="{colors:['red', 'grey']}",
backgroundColor="lightblue"))
plot(G7)
quakes
head(quakes)
str(quakes)
str(wind)
?c
wind <- data.frame(windspeed, as.character(location))
str(wind)
?vector
?vector
?vector
location <- as.vector(location, mode="character")
wind <- data.frame(windspeed, location)
str(wind)
data.frame
?data.frame
class(location)
wind <- data.frame(windspeed, location, stringsAsFactors = F)
str(wind)
str(wind)
G<-gvisGeoChart(data=wind, locationvar = "location", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(displayMode='markers', region='SE'))
plot(G)
str(quakes)
str(wind)
latlong <- c("59.338925:18.069943", "57.72946:111.970587", "55.603734:13.001561")
wind <- data.frame(windspeed, location, stringsAsFactors = F)
str(wind)
wind <- data.frame(windspeed, latlong, stringsAsFactors = F)
str(wind)
str(quakes)
?gvisGeoChart
suppressPackageStartupMessages(library(googleVis))
windspeed <- round(rnorm(3, mean=10, sd=2),1)
# Stockholm, Gothenburg, Malmo
latlong <- c("59.338925:18.069943", "57.72946:111.970587", "55.603734:13.001561")
wind <- data.frame(windspeed, latlong, stringsAsFactors = F)
G<-gvisGeoChart(data=wind, locationvar = "latlong", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(displayMode="markers", region="SE"))
plot(G)
wind
suppressPackageStartupMessages(library(googleVis))
windspeed <- round(rnorm(3, mean=10, sd=2),1)
# Stockholm, Gothenburg, Malmo
latlong <- c("59.338925:18.069943", "57.72946:111.970587", "55.603734:13.001561")
wind <- data.frame(windspeed, latlong, stringsAsFactors = F)
G<-gvisGeoChart(data=wind, locationvar = "latlong", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(displayMode="markers", region="SE"))
plot(G)
# Test script
# Build a data frame of wind speed data for different coordinates in Sweden
# Visualize on Google geo charts
suppressPackageStartupMessages(library(googleVis))
windspeed <- round(rnorm(3, mean=10, sd=2),1)
# Stockholm, Gothenburg, Malmo
latlong <- c("59.338925:18.069943", "57.72946:11.970587", "55.603734:13.001561")
wind <- data.frame(windspeed, latlong, stringsAsFactors = F)
G<-gvisGeoChart(data=wind, locationvar = "latlong", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(displayMode="markers", region="SE"))
plot(G)
#op <- options(gvis.plot.tag='chart') # uncomment to dump the output as html
head(Exports) # let's peek at the data
# this function does the bulk of the work
Geo <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit',
options=list(height=300, width=350))
# prepare the data table
Tbl <- gvisTable(Exports, options=list(height=300, width=200))
# merge the table and the heatmap and plot
plot(gvisMerge(Geo, Tbl, horizontal=TRUE))
require(datasets)
states <- data.frame(state.name, state.x77)
G3 <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G3)
require(datasets)
states <- data.frame(state.name, state.x77)
G3 <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="SE", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G3)
require(datasets)
states <- data.frame(state.name, state.x77)
G3 <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="SE", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G3)
suppressPackageStartupMessages(library(googleVis))
windspeed <- round(rnorm(3, mean=10, sd=2),1)
# Stockholm, Gothenburg, Malmo
latlong <- c("59.338925:18.069943", "57.72946:11.970587", "55.603734:13.001561")
wind <- data.frame(windspeed, latlong, stringsAsFactors = F)
G<-gvisGeoChart(data=wind, locationvar = "latlong", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(displayMode="markers", region="SE",
resolution="provinces"))
plot(G)
G<-gvisGeoChart(data=wind, locationvar = "latlong", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(displayMode="regions", region="SE",
resolution="provinces"))
plot(G)
provinces <- c("Blekinge","Dalarna","Gotland","Gävleborg",
"Halland","Jämtland","Jönköping","Kalmar",
"Kronoberg","Norrbotten","Skåne","Stockholm",
"Södermanland","Uppsala","Värmland","Västerbotten",
"Västernorrland","Västmanland","Västra Götaland",
"Örebro","Östergötland")
length(provinces)
provinces
windspeed <- round(rnorm(21, mean=10, sd=2),1)
provinces <- c("Blekinge","Dalarna","Gotland","Gävleborg",
"Halland","Jämtland","Jönköping","Kalmar",
"Kronoberg","Norrbotten","Skåne","Stockholm",
"Södermanland","Uppsala","Värmland","Västerbotten",
"Västernorrland","Västmanland","Västra Götaland",
"Örebro","Östergötland")
wind <- data.frame(windspeed, provinces, stringsAsFactors = F)
str(wind)
G<-gvisGeoChart(data=wind, locationvar = "provinces", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(displayMode="regions", region="SE",
resolution="provinces"))
plot(G)
wind
provinces <- c("Blekinge","Dalarna","Gotland","Gävleborg",
"Halland","Jämtland","Jönköping","Kalmar",
"Kronoberg","Norrbotten","Skåne","Stockholm",
"Södermanland","Uppsala","Värmland","Västerbotten",
"Västernorrland","Västmanland","Västra Götaland",
"Örebro","Östergötland")
wind <- data.frame(windspeed, provinces, stringsAsFactors = F)
G<-gvisGeoChart(data=wind, locationvar = "provinces", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(displayMode="regions", region="SE",
resolution="provinces"))
plot(G)
provinces
str(Wind)
str(wind)
G<-gvisGeoChart(data=wind, locationvar = "provinces", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(region="SE",displayMode="regions",
resolution="provinces"))
plot(G)
provinces <- c("Blekinge","Dalarna","Gotland","Gavleborg",
"Halland","Jämtland","Jonkoping","Kalmar",
"Kronoberg","Norrbotten","Skane","Stockholm",
"Sodermanland","Uppsala","Varmland","Vasterbotten",
"Vasternorrland","Vastmanland","Vastra Gotaland",
"Orebro","Ostergotland")
wind <- data.frame(windspeed, provinces, stringsAsFactors = F)
G<-gvisGeoChart(data=wind, locationvar = "provinces", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(region="SE",displayMode="regions",
resolution="provinces"))
plot(G)
provinces <- c("Blekinge","Dalarna","Gotland","Gavleborg",
"Halland","Jamtland","Jonkoping","Kalmar",
"Kronoberg","Norrbotten","Skane","Stockholm",
"Sodermanland","Uppsala","Varmland","Vasterbotten",
"Vasternorrland","Vastmanland","Vastra Gotaland",
"Orebro","Ostergotland")
wind <- data.frame(windspeed, provinces, stringsAsFactors = F)
G<-gvisGeoChart(data=wind, locationvar = "provinces", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(region="SE",displayMode="regions",
resolution="provinces"))
plot(G)
provinces <- c("Blekinge","Dalarna","Gotland","Gavleborg",
"Halland","Jamtland","Jonkoping","Kalmar",
"Kronoberg","Norrbotten","Skane","Stockholm",
"Sodermanland","Uppsala","Varmland","Vasterbotten",
"Vasternorrland","Vastmanland","Vastra Gotaland",
"Orebro","Ostergotland")
windspeed <- round(rnorm(length(provinces), mean=10, sd=5),1)
wind <- data.frame(windspeed, provinces, stringsAsFactors = F)
G<-gvisGeoChart(data=wind, locationvar = "provinces", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(region="SE",displayMode="regions",
resolution="provinces"))
plot(G)
suppressPackageStartupMessages(library(googleVis))
provinces <- c("Blekinge","Dalarna","Gotland","Gavleborg",
"Halland","Jamtland","Jonkoping","Kalmar",
"Kronoberg","Norrbotten","Skane","Stockholm",
"Sodermanland","Uppsala","Varmland","Vasterbotten",
"Vasternorrland","Vastmanland","Vastra Gotaland",
"Orebro","Ostergotland")
windspeed <- round(rnorm(length(provinces), mean=10, sd=5),1)
wind <- data.frame(windspeed, provinces, stringsAsFactors = F)
map<-gvisGeoChart(data=wind, locationvar = "provinces", colorvar = "windspeed", sizevar = "",
hovervar = "", options = list(region="SE",displayMode="regions",
resolution="provinces"))
map
str(wind)
provinces <- c("Blekinge","Dalarna","Gotland","Gavleborg",
"Halland","Jamtland","Jonkoping","Kalmar",
"Kronoberg","Norrbotten","Skane","Stockholm",
"Sodermanland","Uppsala","Varmland","Vasterbotten",
"Vasternorrland","Vastmanland","Vastra Gotaland",
"Orebro","Ostergotland")
windspeed <- round(rnorm(length(provinces), mean=10, sd=5),1)
windpower <- data.frame(windspeed, provinces, stringsAsFactors = F)
str(windpower)
install.packages("Rcpp")
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
?navbarPage
?tabPanel
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
?htmlOutput
?uiOutput
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
?htmlOutput
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
?gvisGeoChart
?htmltOutput
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
?navbarPage
install.packages("shinythemes")
require(shinythemes)
shinythemes
library(shinythemes)
?shinythemes
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
?updateSliderInput
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
?actionButton
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
?updateSliderInput
?observe
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
shiny::runApp('C:/Users/danbro/Dropbox/Hack4Sweden/R scripts/Daniel')
?uiOutput
?renderUI
stock <- "MSFT"
start.date <- "2012-01-01"
end.date <- Sys.Date()
quote <- paste("http://ichart.finance.yahoo.com/table.csv?s=",
stock,
"&a=", substr(start.date,6,7),
"&b=", substr(start.date, 9, 10),
"&c=", substr(start.date, 1,4),
"&d=", substr(end.date,6,7),
"&e=", substr(end.date, 9, 10),
"&f=", substr(end.date, 1,4),
"&g=d&ignore=.csv", sep="")
stock.data <- read.csv(quote, as.is=TRUE)
stock.data$Date <- as.Date(stock.data$Date)
## Uncomment the next 3 lines to install the developer version of googleVis
# install.packages(c("devtools","RJSONIO", "knitr", "shiny", "httpuv"))
# library(devtools)
# install_github("mages/googleVis")
library(googleVis)
plot(
gvisCalendar(data=stock.data, datevar="Date", numvar="Adj.Close",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
# See also the entry on stackoverflow: http://goo.gl/KUvmW2
library(lattice)
library(chron)
source("http://blog.revolutionanalytics.com/downloads/calendarHeat.R")
# Plot as calendar heatmap
calendarHeat(stock.data$Date, stock.data$Adj.Close,
varname="MSFT Adjusted Close")
?source
str(stock.data)
library("AnnotationDbi", lib.loc="~/R/win-library/3.1")
detach("package:AnnotationDbi", unload=TRUE)
library("corrgram", lib.loc="~/R/win-library/3.1")
detach("package:corrgram", unload=TRUE)
apropos("mea")
apropos("su")
iris
clc
str(iris)
install.packages("rmr2")
install.packages("rhdfs")
##  load-packages
library(rmr2)
library(rhdfs)
hdfs.init()
rmr.options(backend = "local")
##  R ---------------------------------------------------------------
x <- 1:1000
lapply(x, function(x)cbind(x, x^2))
##  rmr -------------------------------------------------------------
small.ints = to.dfs(1:1000)
a <- mapreduce(
input = small.ints,
map = function(k, v) cbind(v, v^2)
)
a()
from.dfs(a)
source('C:/Nobackup/danbro/Box Sync/PhD Documents/Research/Conferences/2015/UseR/Tutorials/RHadoop/RHadoop-tutorial-master/exercises/ex-1-lapply.R')
install.packages("rmr2")
version
##  load-packages
library(rmr2)
library(rhdfs)
hdfs.init()
rmr.options(backend = "local")
##  R ---------------------------------------------------------------
x <- 1:1000
lapply(x, function(x)cbind(x, x^2))
##  rmr -------------------------------------------------------------
small.ints = to.dfs(1:1000)
a <- mapreduce(
input = small.ints,
map = function(k, v) cbind(v, v^2)
)
a()
from.dfs(a)
install.packages("rmr2")
version
install.packages('rmr2')
install.packages(rmr2)
install.packages("rmr2")
library(rmr2)
install.packages("knitr")
install.packages(c("glmnet", "gridExtra", "ggplot2", "ggvis", "kknn",
"irace", "kernlab", "KMsurv", "mlbench", "mda", "mlr", "party",
"randomForest", "randomForestSRC", "shiny", "sROC", "devtools",
"survMisc", "BatchJobs", "e1071", "rjson"))
setwd("~/GitHub/hack4sweden2016")
